name: Issue Notification to Discord

# This workflow will run on these events
on:
  issues:
    types: [opened, edited, deleted, labeled, unlabeled, closed, reopened]
  issue_comment:
    types: [created, edited, deleted]

# This job will send a notification to Discord
jobs:
  send-notification:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Extract and prepare data from the GitHub event payload
      - name: Prepare Issue Data
        id: prepare_data
        run: |
          ACTION=$(jq -r '.action' $GITHUB_EVENT_PATH)
          ISSUE_TITLE=$(jq -r '.issue.title' $GITHUB_EVENT_PATH)
          ISSUE_URL=$(jq -r '.issue.html_url' $GITHUB_EVENT_PATH)
          ACTOR=$(jq -r '.sender.login' $GITHUB_EVENT_PATH)

          # Use a 'case' structure for a clean logic
          case "$ACTION" in
            opened)
              MESSAGE="Un nuevo issue fue **abierto** por **${ACTOR}**."
              ;;
            closed)
              MESSAGE="Un issue fue **cerrado** por **${ACTOR}**."
              ;;
            reopened)
              MESSAGE="Un issue fue **reabierto** por **${ACTOR}**."
              ;;
            deleted)
              MESSAGE="Un issue fue **eliminado** por **${ACTOR}**."
              ;;
            *)
              MESSAGE="El issue fue **${ACTION}** por **${ACTOR}**."
              ;;
          esac
          
          # Add the title and link to the message
          MESSAGE="${MESSAGE}. **Issue:** [${ISSUE_TITLE}](${ISSUE_URL})"
          
          echo "message=$MESSAGE" >> $GITHUB_ENV

      # Paso 3: Prepara el segundo mensaje (opcional)
      - name: Prepare Secondary Message
        id: prepare_secondary_message
        run: |
          # Puedes crear un mensaje simple o más complejo
          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            COMMENT_BODY=$(jq -r '.comment.body' $GITHUB_EVENT_PATH)
            MESSAGE="**${ACTOR}** comentó en el Issue: [${ISSUE_TITLE}](${ISSUE_URL}) >>> ${COMMENT_BODY}"
          fi
          
          echo "secondary_message=$MESSAGE" >> "$GITHUB_ENV"

      # Step 2: Send the Discord notification using the prepared variables
      - name: Send Discord notification
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_UPDATES_ID }}
          webhook_token: ${{ secrets.DISCORD_UPDATES_TOKEN }}
          username: 'GitHub Updates'
          avatar_url: 'https://cdn.pixabay.com/photo/2022/01/30/13/33/github-6980894_640.png'
          message: 'Nuevo Evento: ${env.message} ${env.secondary.message}'
          file: ''
          tts: false
          debug: false
